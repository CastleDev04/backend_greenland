generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        Int      @id @default(autoincrement())
  nombre    String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rol       Rol      @default(USUARIO)
  cliente Cliente?
}

model Cliente {
  id Int @id @default(autoincrement())
  nombre String
  apellido String
  cedula String @unique
  ruc String?
  estadoCivil String?
  profesion String?
  nacionalidad String?
  fechaNacimiento DateTime?

  email String @unique
  telefono String?
  direccion String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con Usuario
  usuarioId Int? @unique
  usuario Usuario? @relation(fields: [usuarioId], references: [id])

  // Relación con Lote
   lotes Lote[]   @relation("ClienteLotes")

   ventas Venta[] // Relación agregada
}

enum Rol {
  ADMIN
  USUARIO
  VENDEDOR
  COBRANZA
  MODERADOR
  CLIENTE
}

model Fraccionamiento {
  id Int @id @default(autoincrement())
  fraccion String
  ubicacion String
  

}

model Lote {
  id Int @id @default(autoincrement())
  fraccionamiento String 
  distrito String
  finca String
  padron String
  cuentaCatastral String?
  manzana String
  lote String
  loteamiento String
  superficie Float
  precioTotal Float
  modalidadPago String
  cuotas Float?
  montoCuota Float?
  estadoVenta String
  entregado Boolean @default(false)
  amojonado Boolean @default(false)
  limpio Boolean @default(false)
  tieneConstruccion Boolean @default(false)
  //Servicios disponibles
  aguaPotable Boolean @default(false)
  energiaElectrica Boolean @default(false)
  calle Boolean @default(false)
  seguridad Boolean @default(false)

  beneficiosComunes String[]
  requiereExpensas Boolean @default(false)
  expensas Float?

  restriccionConstrucion String[]

  latitud Float?
  longitud Float?

  linderoNorteMedida Float?
  linderoSurMedida Float? 
  linderoEsteMedida Float? 
  linderoOesteMedida Float? 

  linderoNorteCon String?
  linderoSurCon String? 
  linderoEsteCon String? 
  linderoOesteCon String? 
  
  linderoNorteCalle String?
  linderoSurCalle String? 
  linderoEsteCalle String? 
  linderoOesteCalle String?

  observacion String? 

  imagenes String[]
  // Relación con Cliente
  compradorId Int?
  comprador   Cliente? @relation("ClienteLotes", fields: [compradorId], references: [id])

  
  // Relación con Ventas
  ventas Venta[] // Relación agregada

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt



}

model Venta {
  id            Int       @id @default(autoincrement())
  fecha         DateTime  @default(now())
  montoTotal    Float
  estado        String    @default("Activa") // Activa, Cancelada, Finalizada
  tipoPago      String    // "Contado" | "Credito"
  cantidadCuotas Int?     // Solo si es crédito
  montoCuota    Float?
  cuotasPagadas Int    // Solo si es crédito

  // Relaciones
  clienteId     Int
  cliente       Cliente   @relation(fields: [clienteId], references: [id])

  loteId   Int
  lote     Lote @relation(fields: [loteId], references: [id])

  pagos         Pago[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pago {
  id            Int       @id @default(autoincrement())
  fechaEsperada DateTime
  fechaPago     DateTime?
  monto         Float
  mora          Float?    // Interés por mora
  totalPagado   Float?
  metodoPago    String
  estado        String    @default("Pendiente")

  // Relación
  ventaId Int
  venta   Venta @relation(fields: [ventaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}